// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Custom fileds
  invitations   Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invitation {
  id           String           @id @default(cuid())
  email        String           @unique
  role         Role             @default(PROF)
  createdAt    DateTime         @default(now())
  createdBy    String
  validThrough DateTime
  status       IntivationStatus @default(GOOD)

  user User @relation(fields: [createdBy], references: [id])
}

// TODO: remove this once we capture the DB desired model
// model User {
//   id            Int      @id @default(autoincrement())
//   email         String   @unique
//   firstName     String
//   lastName      String
//   role          Role
//   isActive      Boolean  @default(false)
//   school        School[]
//   registeredAt  DateTime @default(now())
//   createdBy     Int
//   createdDate   DateTime @default(now())
//   modifiedBy    Int
//   modifiedDate  DateTime @default(now())
//   lastLoginDate DateTime
// }

// model School {
//   id      Int    @id @default(autoincrement())
//   name    String
//   state   String
//   address String
//   users   User[]
// }

enum Role {
  ADMIN
  PROF
  STUDENT
}

enum IntivationStatus {
  EXPIRED
  GOOD
  ACCEPTED
}
